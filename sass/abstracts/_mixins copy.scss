// Mixins pour les breakpoints
@mixin device($breakpoint) {
    @if $breakpoint == tablet {
        @media (min-width: #{$tablet}) { @content;}
    } @else if $breakpoint == laptop {
        @media (min-width: #{$laptop}) { @content;}
    } @else if $breakpoint == xl-laptop {
        @media (min-width: #{$xl-laptop}) { @content;}
    }
}
// Mixin des boutons
@mixin button-style {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 50px;
    font-family: $font-text;
    font-size: 16px;
    border: none;
    border-radius: 25px;
    box-shadow: inset 0px 0px 0px 0px rgb(255 255 255 / 30%), 0px 4px 10px 0px #00000040;
    background: $purple-gradient;
    color: $white;
    cursor: pointer;
    transition: box-shadow 0.5s ease-in-out;

    &:hover {
        box-shadow: inset 0px 4px 12px 4px rgb(255 255 255 / 30%), 0px 4px 10px 2px #00000040;
    }
}

// Mixin pour le like
@mixin like-style {
    cursor: pointer;
    font-size: 20px;
    position: absolute;
    top: 30%;
    left: 40%;
    opacity: 1;
    transform: translate(-50%, -50%);
} 

//Mixin pour le style de la balle
@mixin loader-ball-style($reverse, $circle-size, $ball-size) {
    position: absolute;
    content: "";
    top: 50%;
    left: 50%;
    transform: translateX(calc($circle-size / 2 - $ball-size - 5px)) rotate(170deg);
    transform-origin: -(calc($circle-size / 2 - $ball-size - 5px)) 0px;
    opacity: 0;
    background: $purple-gradient;
    width: $ball-size;
    height: $ball-size;
    border-radius: 50%;

    @include device(tablet) {
        
    }

    @if $reverse{
        @include apply-ball-animations(
            forwards, $circle-size, $ball-size, false,
            spin-reverse, true, 360deg, 220deg, 85deg, 35deg,  $loader-spin-duration, $loader-spin-delay,
            visible-ball, 0.3s, 2s, ease-in-out, false,
            hide-ball, 0.3s, 8s, ease-in-out, true
            ) ;
    } @else  {
        @include apply-ball-animations(
            forwards, $circle-size, $ball-size, false,
            spin, false, 170deg, 310deg, 445deg, 35deg,  $loader-spin-duration, $loader-spin-delay,
            visible-ball, 0.3s, 2s, ease-in-out, false,
            hide-ball, 0.3s, 8s, ease-in-out, true
            ) ;
    }

}

// Animation d'apparition
@mixin visible-opacity($name, $duration, $delay, $timing, $fill-mode, $visible, $play-animation) {

    @if $visible {
        @keyframes #{$name} {
            to {
                opacity: 0;
            }
        }
    } @else {
        @keyframes #{$name} {
            to {
                opacity: 1;
            }
        }
    }
    @if $play-animation {
        & {
            animation: $name $duration $delay $timing $fill-mode;
        }
    }
}

@mixin visible-scale($name, $duration, $delay, $timing, $fill-mode, $visible, $scale-type, $play-animation) {

    @if $visible {
        @keyframes #{$name} {
            from {
                transform: translate(-50%, -50%) #{$scale-type}(1);
            } 
            to {
                transform: translate(-50%, -50%) #{$scale-type}(0);
            }
        }
    } @else {
        @keyframes #{$name} {
            from {
                transform: translate(-50%, -50%) #{$scale-type}(0);
            } 
            to {
                transform: translate(-50%, -50%) #{$scale-type}(1);
            }      
        }
    }
    @if $play-animation {
        & {
            animation: $name $duration $delay $timing $fill-mode;
        }
    }
}

//Animation pour les balles
@mixin spin-ball-anim($name, $reverse, $start, $start-rotate, $end, $increment, $circle-size, $ball-size) {
$rotation: 0deg;

@keyframes #{$name} {
    0% {
        transform: translate(calc($circle-size / 2 - $ball-size - 5px)) rotate($start);
        @include device(tablet) {
            transform: translate(calc($circle-size / 2 - $ball-size - 5px)) rotate($start);
        }
    }
    
    @for $i from 0 through 3 {
        $percentage: if($i == 0, 10, $i * 20 + 10);
        @if $reverse {
            $rotation : $start-rotate - ($i * $increment),
            
        } @else {
            $rotation : $start-rotate + ($i * $increment);
            
        }
        #{$percentage + 0%} {
            transform: translateX(calc($circle-size / 2 - $ball-size - 5px)) rotate($rotation);
        }
        #{$percentage + 10%} {
            transform: translateX(calc($circle-size / 2 - $ball-size - 5px)) rotate($rotation);
        }
    }
    100% {
        transform: translateX(calc($circle-size / 2 - $ball-size - 5px)) rotate($end);
        @include device(tablet) {
            transform: translateX(calc($circle-size / 2 - $ball-size - 5px)) rotate($end);
        }
    }
}
}


// Mixin animations multiples
@mixin apply-ball-animations(
    $fill-mode, $circle-size, $ball-size, $play-animation,
    $spin-name, $spin-reverse, $spin-start, $spin-start-rotate, $spin-end, $spin-increment, $spin-duration, $spin-delay,
    $opacity-name1, $opacity-duration1, $opacity-delay1, $opacity-timing1, $opacity-visible1,
    $opacity-name2, $opacity-duration2, $opacity-delay2, $opacity-timing2, $opacity-visible2
    ) {
    @include spin-ball-anim($spin-name, $spin-reverse, $spin-start, $spin-start-rotate, $spin-end, $spin-increment, $circle-size, $ball-size);
    @include visible-opacity($opacity-name1, $opacity-duration1, $opacity-delay1, $opacity-timing1, $fill-mode, $opacity-visible1, $play-animation);
    @include visible-opacity($opacity-name2, $opacity-duration2, $opacity-delay2, $opacity-timing2, $fill-mode, $opacity-visible2, $play-animation);
    
    & {animation: #{$spin-name} $spin-duration $spin-delay $fill-mode,
                #{$opacity-name1} $opacity-duration1 $opacity-delay1 $opacity-timing1 $fill-mode,
                #{$opacity-name2} $opacity-duration2 $opacity-delay2 $opacity-timing2 $fill-mode;
}
    }


@mixin hide-loader(
    $fill-mode, $visible, $play-animation,
    $opacity-name, $opacity-duration, $opacity-delay, $opacity-timing,
    $scale-name, $scale-duration, $scale-delay, $scale-timing, $scale-type
) {
    @include visible-opacity($opacity-name, $opacity-duration, $opacity-delay, $opacity-timing, $fill-mode, $visible, $play-animation);
    @include visible-scale($scale-name, $scale-duration, $scale-delay, $scale-timing, $fill-mode, $visible, $scale-type, $play-animation);

    & {animation: #{$opacity-name} $opacity-duration $opacity-delay $opacity-timing $fill-mode,
                    #{$scale-name} $scale-duration $scale-delay $scale-timing $fill-mode;
                    }
}